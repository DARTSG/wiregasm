From b00725b5f086db3d918b9a0f1e83b5f99ef22971 Mon Sep 17 00:00:00 2001
From: Osama Khalid <osama@codinghazard.com>
Date: Sat, 4 Feb 2023 22:07:33 -0500
Subject: [PATCH] synchronous registration

---
 epan/register.c | 93 ++++++++++++-------------------------------------
 1 file changed, 22 insertions(+), 71 deletions(-)

diff --git a/epan/register.c b/epan/register.c
index d8c0eda839..eab9e64a57 100644
--- a/epan/register.c
+++ b/epan/register.c
@@ -17,29 +17,22 @@
 
 #include "epan/dissectors/dissectors.h"
 
-static const char *cur_cb_name = NULL;
-// We could use g_atomic_pointer_set/get instead of a mutex, but that's
-// currently (early 2018) invisible to TSAN.
-static GMutex cur_cb_name_mtx;
-static GAsyncQueue *register_cb_done_q;
-
-#define CB_WAIT_TIME (150 * 1000) // microseconds
-
-static void set_cb_name(const char *proto) {
-    g_mutex_lock(&cur_cb_name_mtx);
-    cur_cb_name = proto;
-    g_mutex_unlock(&cur_cb_name_mtx);
-}
-
-static void *
-register_all_protocols_worker(void *arg _U_)
+void
+register_all_protocols(register_cb cb, gpointer cb_data)
 {
-    void *volatile error_message = NULL;
+    const char *cb_name = NULL;
+    gboolean called_back = FALSE;
+    const char *error_message = NULL;
 
     TRY {
         for (gulong i = 0; i < dissector_reg_proto_count; i++) {
-            set_cb_name(dissector_reg_proto[i].cb_name);
+            cb_name = dissector_reg_proto[i].cb_name;
             dissector_reg_proto[i].cb_func();
+
+            if (cb && cb_name) {
+                cb(RA_REGISTER, cb_name, cb_data);
+                called_back = TRUE;
+            }
         }
     }
     CATCH(DissectorError) {
@@ -56,30 +49,6 @@ register_all_protocols_worker(void *arg _U_)
     }
     ENDTRY;
 
-    g_async_queue_push(register_cb_done_q, GINT_TO_POINTER(TRUE));
-    return (void *) error_message;
-}
-
-void
-register_all_protocols(register_cb cb, gpointer cb_data)
-{
-    const char *cb_name;
-    register_cb_done_q = g_async_queue_new();
-    gboolean called_back = FALSE;
-    GThread *rapw_thread;
-    const char *error_message;
-
-    rapw_thread = g_thread_new("register_all_protocols_worker", &register_all_protocols_worker, NULL);
-    while (!g_async_queue_timeout_pop(register_cb_done_q, CB_WAIT_TIME)) {
-        g_mutex_lock(&cur_cb_name_mtx);
-        cb_name = cur_cb_name;
-        g_mutex_unlock(&cur_cb_name_mtx);
-        if (cb && cb_name) {
-            cb(RA_REGISTER, cb_name, cb_data);
-            called_back = TRUE;
-        }
-    }
-    error_message = (const char *) g_thread_join(rapw_thread);
     if (error_message != NULL)
         THROW_MESSAGE(DissectorError, error_message);
     if (cb && !called_back) {
@@ -87,15 +56,22 @@ register_all_protocols(register_cb cb, gpointer cb_data)
     }
 }
 
-static void *
-register_all_protocol_handoffs_worker(void *arg _U_)
+void
+register_all_protocol_handoffs(register_cb cb, gpointer cb_data)
 {
-    void *volatile error_message = NULL;
+    const char *cb_name = NULL;
+    gboolean called_back = FALSE;
+    const char *error_message = NULL;
 
     TRY {
         for (gulong i = 0; i < dissector_reg_handoff_count; i++) {
-            set_cb_name(dissector_reg_handoff[i].cb_name);
+            cb_name = dissector_reg_handoff[i].cb_name;
             dissector_reg_handoff[i].cb_func();
+
+            if (cb && cb_name) {
+                cb(RA_HANDOFF, cb_name, cb_data);
+                called_back = TRUE;
+            }
         }
     }
     CATCH(DissectorError) {
@@ -112,36 +88,11 @@ register_all_protocol_handoffs_worker(void *arg _U_)
     }
     ENDTRY;
 
-    g_async_queue_push(register_cb_done_q, GINT_TO_POINTER(TRUE));
-    return (void *) error_message;
-}
-
-void
-register_all_protocol_handoffs(register_cb cb, gpointer cb_data)
-{
-    const char *cb_name;
-    gboolean called_back = FALSE;
-    GThread *raphw_thread;
-    const char *error_message;
-
-    set_cb_name(NULL);
-    raphw_thread = g_thread_new("register_all_protocol_handoffs_worker", &register_all_protocol_handoffs_worker, NULL);
-    while (!g_async_queue_timeout_pop(register_cb_done_q, CB_WAIT_TIME)) {
-        g_mutex_lock(&cur_cb_name_mtx);
-        cb_name = cur_cb_name;
-        g_mutex_unlock(&cur_cb_name_mtx);
-        if (cb && cb_name) {
-            cb(RA_HANDOFF, cb_name, cb_data);
-            called_back = TRUE;
-        }
-    }
-    error_message = (const char *) g_thread_join(raphw_thread);
     if (error_message != NULL)
         THROW_MESSAGE(DissectorError, error_message);
     if (cb && !called_back) {
         cb(RA_HANDOFF, "finished", cb_data);
     }
-    g_async_queue_unref(register_cb_done_q);
 }
 
 gulong register_count(void)
-- 
2.34.1

